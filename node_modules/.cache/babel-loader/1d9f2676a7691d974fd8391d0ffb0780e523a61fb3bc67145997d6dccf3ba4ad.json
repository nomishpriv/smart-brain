{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\face-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n// import {ClarifaiStub, grpc} from \"clarifai-nodejs-grpc\";\n\n// import Clarifai from 'clarifai';\n\n// const app = new Clarifai.App({\n//     apikey: 'c0c58b40549944bba96742d2442701ca'\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const USER_ID = 'YOUR_USER_ID_HERE';\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = 'YOUR_PAT_HERE';\n  const APP_ID = 'YOUR_APP_ID_HERE';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'general-image-recognition';\n  const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\n  const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n\n  // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n  // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n  // this will default to the latest version_id\n\n  fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n  //     const stub = ClarifaiStub.grpc();\n\n  // const metadata = new grpc.Metadata();\n  // metadata.set(\"authorization\", \"Key YOUR_CLARIFAI_API_KEY\");\n\n  const particlesInit = useCallback(async engine => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(engine);\n  }, []);\n  const particlesLoaded = useCallback(async container => {\n    await console.log(container);\n  }, []);\n  const onInputChange = event => {\n    console.log(event.target.value);\n  };\n  const onButtonSubmit = () => {\n    console.log('click');\n\n    // stub.PostModelOutputs(\n    //     {\n    //         // This is the model ID of a publicly available General model. You may use any other public or custom model ID.\n    //         model_id: \"aaa03c23b3724a16a56b629203edc62c\",\n    //         inputs: [{data: {image: {url: \"https://samples.clarifai.com/dog2.jpeg\"}}}]\n    //     },\n    //     metadata,\n    //     (err, response) => {\n    //         if (err) {\n    //             console.log(\"Error: \" + err);\n    //             return;\n    //         }\n\n    //         if (response.status.code !== 10000) {\n    //             console.log(\"Received failed status: \" + response.status.description + \"\\n\" + response.status.details);\n    //             return;\n    //         }\n\n    //         console.log(\"Predicted concepts, with confidence values:\")\n    //         for (const c of response.outputs[0].data.concepts) {\n    //             console.log(c.name + \": \" + c.value);\n    //         }\n    //     }\n    // );\n\n    //     app.models.predict(\"c0c58b40549944bba96742d2442701ca\", \"https://samples.clarifai.com/face-det.jpg\").then(\n    //     function(response) {\n    //         console.log(response);\n\n    //     },\n    //     function(err ){\n\n    //     }\n    // );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Particles, {\n      className: \"particles\",\n      id: \"tsparticles\",\n      init: particlesInit,\n      loaded: particlesLoaded,\n      options: {\n        // background: {\n        //     color: {\n        //         value: \"#0d47a1\",\n        //     },\n        // },\n        // fpsLimit: 120,\n        // interactivity: {\n        //     events: {\n        //         onClick: {\n        //             enable: true,\n        //             mode: \"push\",\n        //         },\n        //         onHover: {\n        //             enable: true,\n        //             mode: \"repulse\",\n        //         },\n        //         resize: true,\n        //     },\n        //     modes: {\n        //         push: {\n        //             quantity: 4,\n        //         },\n        //         repulse: {\n        //             distance: 200,\n        //             duration: 0.4,\n        //         },\n        //     },\n        // },\n        particles: {\n          // color: {\n          //     value: \"#ffffff\",\n          // },\n          links: {\n            color: \"#ffffff\",\n            distance: 300,\n            enable: true,\n            opacity: 0.5,\n            width: 1\n          },\n          collisions: {\n            enable: false\n          },\n          move: {\n            // directions: \"none\",\n            enable: true,\n            // outModes: {\n            //     default: \"bounce\",\n            // },\n            random: true,\n            speed: 1,\n            straight: true\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 600\n            },\n            value: 40\n          }\n          // opacity: {\n          //     value: 0.5,\n          // },\n          // shape: {\n          //     type: \"circle\",\n          // },\n          // size: {\n          //     value: { min: 1, max: 5 },\n          // },\n        },\n\n        detectRetina: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n      onInputChange: onInputChange,\n      onButtonSubmit: onButtonSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"PjleD03JXt5mR6AE5+SxrsWvXBc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navigation","Logo","ImageLinkForm","Rank","useCallback","Particles","loadFull","App","USER_ID","PAT","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","result","console","log","catch","error","particlesInit","engine","particlesLoaded","container","onInputChange","event","target","value","onButtonSubmit","particles","links","color","distance","enable","opacity","width","collisions","move","random","speed","straight","number","density","area","detectRetina"],"sources":["E:/React/face-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n// import {ClarifaiStub, grpc} from \"clarifai-nodejs-grpc\";\n\n\n// import Clarifai from 'clarifai';\n\n// const app = new Clarifai.App({\n//     apikey: 'c0c58b40549944bba96742d2442701ca'\n// });\n\n\nconst App = () => {\n\n    const USER_ID = 'YOUR_USER_ID_HERE';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = 'YOUR_PAT_HERE';\n    const APP_ID = 'YOUR_APP_ID_HERE';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'general-image-recognition';\n    const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n    const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n//     const stub = ClarifaiStub.grpc();\n\n// const metadata = new grpc.Metadata();\n// metadata.set(\"authorization\", \"Key YOUR_CLARIFAI_API_KEY\");\n\n\n    const particlesInit = useCallback(async engine => {\n      console.log(engine);\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      await loadFull(engine);\n  }, []);\n\n  const particlesLoaded = useCallback(async container => {\n      await console.log(container);\n  }, []);\n\n    const onInputChange = (event) => {\n        console.log(event.target.value);\n  }\n    const onButtonSubmit = () => {\n            console.log('click');\n\n            // stub.PostModelOutputs(\n            //     {\n            //         // This is the model ID of a publicly available General model. You may use any other public or custom model ID.\n            //         model_id: \"aaa03c23b3724a16a56b629203edc62c\",\n            //         inputs: [{data: {image: {url: \"https://samples.clarifai.com/dog2.jpeg\"}}}]\n            //     },\n            //     metadata,\n            //     (err, response) => {\n            //         if (err) {\n            //             console.log(\"Error: \" + err);\n            //             return;\n            //         }\n            \n            //         if (response.status.code !== 10000) {\n            //             console.log(\"Received failed status: \" + response.status.description + \"\\n\" + response.status.details);\n            //             return;\n            //         }\n            \n            //         console.log(\"Predicted concepts, with confidence values:\")\n            //         for (const c of response.outputs[0].data.concepts) {\n            //             console.log(c.name + \": \" + c.value);\n            //         }\n            //     }\n            // );\n\n        //     app.models.predict(\"c0c58b40549944bba96742d2442701ca\", \"https://samples.clarifai.com/face-det.jpg\").then(\n        //     function(response) {\n        //         console.log(response);\n\n        //     },\n        //     function(err ){\n\n        //     }\n        // );\n    }\n\n    return (\n      <div className=\"App\">\n\n<Particles className='particles'\n              id=\"tsparticles\"\n              init={particlesInit}\n              loaded={particlesLoaded}\n            options={{\n                // background: {\n                //     color: {\n                //         value: \"#0d47a1\",\n                //     },\n                // },\n                // fpsLimit: 120,\n                // interactivity: {\n                //     events: {\n                //         onClick: {\n                //             enable: true,\n                //             mode: \"push\",\n                //         },\n                //         onHover: {\n                //             enable: true,\n                //             mode: \"repulse\",\n                //         },\n                //         resize: true,\n                //     },\n                //     modes: {\n                //         push: {\n                //             quantity: 4,\n                //         },\n                //         repulse: {\n                //             distance: 200,\n                //             duration: 0.4,\n                //         },\n                //     },\n                // },\n                particles: {\n                    // color: {\n                    //     value: \"#ffffff\",\n                    // },\n                    links: {\n                        color: \"#ffffff\",\n                        distance: 300,\n                        enable: true,\n                        opacity: 0.5,\n                        width: 1,\n                    },\n                    collisions: {\n                        enable: false,\n                    },\n                    move: {\n                        // directions: \"none\",\n                        enable: true,\n                        // outModes: {\n                        //     default: \"bounce\",\n                        // },\n                        random: true,\n                        speed: 1,\n                        straight: true,\n                    },\n                    number: {\n                        density: {\n                            enable: true,\n                            area: 600,\n                        },\n                        value: 40,\n                    },\n                    // opacity: {\n                    //     value: 0.5,\n                    // },\n                    // shape: {\n                    //     type: \"circle\",\n                    // },\n                    // size: {\n                    //     value: { min: 1, max: 5 },\n                    // },\n                },\n                detectRetina: false,\n            }}\n        />\n\n\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm onInputChange={onInputChange} onButtonSubmit={onButtonSubmit} />\n        {/* <FaceRecognition /> */}\n      </div>\n    );\n  }\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}