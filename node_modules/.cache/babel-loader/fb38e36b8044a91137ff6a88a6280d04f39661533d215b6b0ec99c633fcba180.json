{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\face-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const particlesInit = useCallback(async engine => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    await loadFull(engine);\n  }, []);\n  const particlesLoaded = useCallback(async container => {\n    await console.log(container);\n  }, []);\n  const [input, setInput] = useState('');\n  const onInputChange = event => {\n    setInput(event.target.value);\n  };\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState({});\n  const calculateFaceLocation = data => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    console.log(width, height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height\n    };\n  };\n  const displayFaceBox = box => {\n    setBox(box);\n  };\n  const [route, setRoute] = useState('signin');\n  const onButtonSubmit = () => {\n    setImageUrl(input);\n    const USER_ID = 'nomankhan';\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    const PAT = '16a2e33a74dd4dfb90385d0202bde6a8';\n    const APP_ID = 'my-first-application';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'face-detection';\n    const MODEL_VERSION_ID = '45fb9a671625463fa646c3523a3087d5';\n    const IMAGE_URL = input;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n      \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n      },\n      \"inputs\": [{\n        \"data\": {\n          \"image\": {\n            \"url\": IMAGE_URL\n          }\n        }\n      }]\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.json()).then(result => displayFaceBox(calculateFaceLocation(result))).catch(error => console.log('error', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Particles, {\n      className: \"particles\",\n      id: \"tsparticles\",\n      init: particlesInit,\n      loaded: particlesLoaded,\n      options: {\n        // background: {\n        //     color: {\n        //         value: \"#0d47a1\",\n        //     },\n        // },\n        // fpsLimit: 120,\n        // interactivity: {\n        //     events: {\n        //         onClick: {\n        //             enable: true,\n        //             mode: \"push\",\n        //         },\n        //         onHover: {\n        //             enable: true,\n        //             mode: \"repulse\",\n        //         },\n        //         resize: true,\n        //     },\n        //     modes: {\n        //         push: {\n        //             quantity: 4,\n        //         },\n        //         repulse: {\n        //             distance: 200,\n        //             duration: 0.4,\n        //         },\n        //     },\n        // },\n        particles: {\n          // color: {\n          //     value: \"#ffffff\",\n          // },\n          links: {\n            color: \"#ffffff\",\n            distance: 300,\n            enable: true,\n            opacity: 0.5,\n            width: 1\n          },\n          collisions: {\n            enable: false\n          },\n          move: {\n            // directions: \"none\",\n            enable: true,\n            // outModes: {\n            //     default: \"bounce\",\n            // },\n            random: true,\n            speed: 1,\n            straight: true\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 600\n            },\n            value: 40\n          }\n          // opacity: {\n          //     value: 0.5,\n          // },\n          // shape: {\n          //     type: \"circle\",\n          // },\n          // size: {\n          //     value: { min: 1, max: 5 },\n          // },\n        },\n\n        detectRetina: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n      onRouteChange: onRouteChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: onInputChange,\n        onButtonSubmit: onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        box: box,\n        imageUrl: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"dXNFGDUc/FBXR2ddn29+shipvsw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navigation","Signin","FaceRecognition","Logo","ImageLinkForm","Rank","useCallback","Particles","loadFull","React","useState","App","particlesInit","engine","console","log","particlesLoaded","container","input","setInput","onInputChange","event","target","value","imageUrl","setImageUrl","box","setBox","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","route","setRoute","onButtonSubmit","USER_ID","PAT","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","result","catch","error","particles","links","color","distance","enable","opacity","collisions","move","random","speed","straight","number","density","area","detectRetina","onRouteChange"],"sources":["E:/React/face-app/src/App.js"],"sourcesContent":["import './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport React, { useState } from 'react'\n\n\n\n\n\n\nconst App = () => {\n\n    const particlesInit = useCallback(async engine => {\n      console.log(engine);\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      await loadFull(engine);\n  }, []);\n\n  const particlesLoaded = useCallback(async container => {\n      await console.log(container);\n  }, []);\n\n  const [input, setInput] = useState('');\n\n    const onInputChange = (event) => {\n        setInput(event.target.value);\n  }\n\n  const [imageUrl, setImageUrl] = useState('');\n  const [box, setBox] = useState({});\n\n  const calculateFaceLocation = (data) => {\n        const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n        const image = document.getElementById('inputimage');\n        const width = Number(image.width);\n        const height = Number(image.height);\n        console.log(width, height);\n        return {\n            leftCol: clarifaiFace.left_col * width,\n            topRow: clarifaiFace.top_row * height,\n            rightCol: width - (clarifaiFace.right_col * width),\n            bottomRow: height - (clarifaiFace.bottom_row * height)\n        }\n  }\n  const displayFaceBox = (box) => {\n            setBox(box);\n  }\n  \n  const [route, setRoute] = useState('signin');\n\n\n  \n    const onButtonSubmit = () => {\n        setImageUrl(input);\n             const USER_ID = 'nomankhan';\n            // Your PAT (Personal Access Token) can be found in the portal under Authentification\n            const PAT = '16a2e33a74dd4dfb90385d0202bde6a8';\n            const APP_ID = 'my-first-application';\n            // Change these to whatever model and image URL you want to use\n            const MODEL_ID = 'face-detection';\n            const MODEL_VERSION_ID = '45fb9a671625463fa646c3523a3087d5';    \n            const IMAGE_URL = input ;\n        \n            ///////////////////////////////////////////////////////////////////////////////////\n            // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n            ///////////////////////////////////////////////////////////////////////////////////\n        \n            const raw = JSON.stringify({\n                \"user_app_id\": {\n                    \"user_id\": USER_ID,\n                    \"app_id\": APP_ID\n                },\n                \"inputs\": [\n                    {\n                        \"data\": {\n                            \"image\": {\n                                \"url\": IMAGE_URL\n                            }\n                        }\n                    }\n                ]\n            });\n        \n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Authorization': 'Key ' + PAT\n                },\n                body: raw\n            };\n        \n            // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n            // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n            // this will default to the latest version_id\n        \n            fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n                .then(response => response.json())\n                .then(result => displayFaceBox(calculateFaceLocation(result)))\n                .catch(error => console.log('error', error));\n\n    }\n\n    return (\n      <div className=\"App\">\n\n<Particles className='particles'\n              id=\"tsparticles\"\n              init={particlesInit}\n              loaded={particlesLoaded}\n            options={{\n                // background: {\n                //     color: {\n                //         value: \"#0d47a1\",\n                //     },\n                // },\n                // fpsLimit: 120,\n                // interactivity: {\n                //     events: {\n                //         onClick: {\n                //             enable: true,\n                //             mode: \"push\",\n                //         },\n                //         onHover: {\n                //             enable: true,\n                //             mode: \"repulse\",\n                //         },\n                //         resize: true,\n                //     },\n                //     modes: {\n                //         push: {\n                //             quantity: 4,\n                //         },\n                //         repulse: {\n                //             distance: 200,\n                //             duration: 0.4,\n                //         },\n                //     },\n                // },\n                particles: {\n                    // color: {\n                    //     value: \"#ffffff\",\n                    // },\n                    links: {\n                        color: \"#ffffff\",\n                        distance: 300,\n                        enable: true,\n                        opacity: 0.5,\n                        width: 1,\n                    },\n                    collisions: {\n                        enable: false,\n                    },\n                    move: {\n                        // directions: \"none\",\n                        enable: true,\n                        // outModes: {\n                        //     default: \"bounce\",\n                        // },\n                        random: true,\n                        speed: 1,\n                        straight: true,\n                    },\n                    number: {\n                        density: {\n                            enable: true,\n                            area: 600,\n                        },\n                        value: 40,\n                    },\n                    // opacity: {\n                    //     value: 0.5,\n                    // },\n                    // shape: {\n                    //     type: \"circle\",\n                    // },\n                    // size: {\n                    //     value: { min: 1, max: 5 },\n                    // },\n                },\n                detectRetina: false,\n            }}\n        />\n\n\n        <Navigation />\n        { route === 'signin'\n            ? <Signin onRouteChange={onRouteChange} />\n\n            : <div>\n            <Logo />\n            <Rank />\n            <ImageLinkForm onInputChange={onInputChange} onButtonSubmit={onButtonSubmit} />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n            </div>\n        }\n    </div>\n    );\n  }\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}